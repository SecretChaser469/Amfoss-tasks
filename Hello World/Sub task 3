Python

def print_diamond(n):
    for i in range(n):
        print(' ' * (n - i - 1) + '*' * (2 * i + 1))
    for i in range(n - 2, -1, -1):
        print(' ' * (n - i - 1) + '*' * (2 * i + 1))

if __name__ == "__main__":
    n = int(input("Enter the number of rows: "))
    print_diamond(n)
Ruby

def print_diamond(n)
  (0...n).each do |i|
    puts ' ' * (n - i - 1) + '*' * (2 * i + 1)
  end
  (n - 2).downto(0) do |i|
    puts ' ' * (n - i - 1) + '*' * (2 * i + 1)
  end
end

print "Enter the number of rows: "
n = gets.to_i
print_diamond(n)
Elixir

defmodule Diamond do
  def print_diamond(n) do
    0..(n - 1)
    |> Enum.each(fn i ->
      IO.puts(String.duplicate(" ", n - i - 1) <> String.duplicate("*", 2 * i + 1))
    end)
    
    (n - 2)..0
    |> Enum.each(fn i ->
      IO.puts(String.duplicate(" ", n - i - 1) <> String.duplicate("*", 2 * i + 1))
    end)
  end
end

IO.write("Enter the number of rows: ")
n = IO.gets("") |> String.trim() |> String.to_integer()
Diamond.print_diamond(n)
JavaScript

function printDiamond(n) {
    for (let i = 0; i < n; i++) {
        console.log(' '.repeat(n - i - 1) + '*'.repeat(2 * i + 1));
    }
    for (let i = n - 2; i >= 0; i--) {
        console.log(' '.repeat(n - i - 1) + '*'.repeat(2 * i + 1));
    }
}

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('Enter the number of rows: ', (input) => {
    const n = parseInt(input);
    printDiamond(n);
    rl.close();
});
Java

import java.util.Scanner;

public class DiamondPattern {
    public static void printDiamond(int n) {
        for (int i = 0; i < n; i++) {
            System.out.println(" ".repeat(n - i - 1) + "*".repeat(2 * i + 1));
        }
        for (int i = n - 2; i >= 0; i--) {
            System.out.println(" ".repeat(n - i - 1) + "*".repeat(2 * i + 1));
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int n = scanner.nextInt();
        printDiamond(n);
        scanner.close();
    }
}
Go

package main

import (
    "fmt"
    "strings"
)

func printDiamond(n int) {
    for i := 0; i < n; i++ {
        fmt.Println(strings.Repeat(" ", n-i-1) + strings.Repeat("*", 2*i+1))
    }
    for i := n - 2; i >= 0; i-- {
        fmt.Println(strings.Repeat(" ", n-i-1) + strings.Repeat("*", 2*i+1))
    }
}

func main() {
    var n int
    fmt.Print("Enter the number of rows: ")
    fmt.Scan(&n)
    printDiamond(n)
}
C

#include <stdio.h>

void print_diamond(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            putchar(' ');
        }
        for (int j = 0; j < 2 * i + 1; j++) {
            putchar('*');
        }
        putchar('\n');
    }
    for (int i = n - 2; i >= 0; i--) {
        for (int j = 0; j < n - i - 1; j++) {
            putchar(' ');
        }
        for (int j = 0; j < 2 * i + 1; j++) {
            putchar('*');
        }
        putchar('\n');
    }
}

int main() {
    int n;
    printf("Enter the number of rows: ");
    scanf("%d", &n);
    print_diamond(n);
    return 0;
}
C++

#include <iostream>
#include <string>

void printDiamond(int n) {
    for (int i = 0; i < n; i++) {
        std::cout << std::string(n - i - 1, ' ') << std::string(2 * i + 1, '*') << std::endl;
    }
    for (int i = n - 2; i >= 0; i--) {
        std::cout << std::string(n - i - 1, ' ') << std::string(2 * i + 1, '*') << std::endl;
    }
}

int main() {
    int n;
    std::cout << "Enter the number of rows: ";
    std::cin >> n;
    printDiamond(n);
    return 0;
}
Rust

use std::io;

fn print_diamond(n: usize) {
    for i in 0..n {
        println!(
            "{}{}",
            " ".repeat(n - i - 1),
            "*".repeat(2 * i + 1)
        );
    }
    for i in (0..n-1).rev() {
        println!(
            "{}{}",
            " ".repeat(n - i - 1),
            "*".repeat(2 * i + 1)
        );
    }
}

fn main() {
    let mut input = String::new();
    println!("Enter the number of rows: ");
    io::stdin().read_line(&mut input).expect("Failed to read input");
    let n: usize = input.trim().parse().expect("Please enter a valid number");
    print_diamond(n);
}
Haskell

import Data.List (replicate)

printDiamond :: Int -> IO ()
printDiamond n = do
    mapM_ (putStrLn . (\i -> replicate (n - i - 1) ' ' ++ replicate (2 * i + 1) '*')) [0..(n-1)]
    mapM_ (putStrLn . (\i -> replicate (n - i - 1) ' ' ++ replicate (2 * i + 1) '*')) [(n-2),(n-3)..0]

main :: IO ()
main = do
    putStr "Enter the number of rows: "
    n <- readLn
    printDiamond n
